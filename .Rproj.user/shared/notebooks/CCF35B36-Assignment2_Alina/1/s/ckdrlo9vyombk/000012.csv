"0","# DATA SIMULATION FOR RANDOM AGENT WITH NOISE"
"0","trials <- 120"
"0",""
"0",""
"0","# function for random agent with bias + noise"
"0","RandomAgentNoise_f <- function(rate, noise) {"
"0","  "
"0","  # generating noiseless choices"
"0","  choice <- rbinom(1, 1, rate) "
"0","  # introducing noise"
"0","  if (rbinom(1, 1, noise) == 1) {"
"0","    choice = rbinom(1, 1, 0.5) "
"0","  }"
"0","  return(choice)"
"0","}"
"0",""
"0",""
"0","# initialize empty dataframe to receive simulation results"
"0","d <- NULL"
"0",""
"0",""
"0","# looping through noise levels"
"0","for (noise in seq(0, 0.5, 0.1)) { "
"0",""
"0","  # looping through rate levels"
"0","  for (rate in seq(0, 1, 0.1)) { "
"0","    randomChoice <- rep(NA, trials)"
"0","    "
"0","    # looping through trials (to make it homologous to more reactive models)"
"0","    for (t in seq(trials)) { "
"0","      randomChoice[t] <- RandomAgentNoise_f(rate, noise)"
"0","    }"
"0","    "
"0","    # temporary df  to store trial number, choice, rate, noise level and "
"0","    # cumulative rate for each trial"
"0","    temp <- tibble(trial = seq(trials), "
"0","                   choice = randomChoice, "
"0","                   rate, "
"0","                   noise)"
"0","    temp$cumulativerate <- cumsum(temp$choice) / seq_along(temp$choice)"
"0",""
"0","    # append contents of temporary df to existing df"
"0","    if (exists(""d"")) {"
"0","      d <- rbind(d, temp)"
"0","    } else{"
"0","      d <- temp"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","# save simulation output"
"0","write_csv(d, ""simdata/W3_randomnoise.csv"")"
"0",""
"0","# Now we visualize it "
"0","p1 <- ggplot(d, aes(trial, "
"0","                    cumulativerate, "
"0","                    group = rate, "
"0","                    color = rate)) + "
"0","  geom_line() + "
"0","  geom_hline(yintercept = 0.5, "
"0","             linetype = ""dashed"") + "
"0","  ylim(0,1) + "
"0","  facet_wrap(.~noise) + "
"0","  theme_classic()"
"0","p1"
